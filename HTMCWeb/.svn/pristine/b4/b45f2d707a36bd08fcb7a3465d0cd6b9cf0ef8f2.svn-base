package Utility;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;

import javax.faces.context.FacesContext;
import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

import Entities.Usuario;

public class Reporte {

	Connection conn;

	private byte[] reportPdf;

	private DateFormat dateFormat;
	private Calendar calendar;
	private String fecha_ruta;
	private String nombre_usuario;

	public Reporte() {
		this.calendar = Calendar.getInstance();
		this.dateFormat = new SimpleDateFormat("dd_MM_YYYY_HH_mm");
		this.fecha_ruta = this.dateFormat.format(this.calendar.getTime());
		HttpSession session = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);

		Usuario usuario = (Usuario) session.getAttribute("userInSession");

		if (usuario != null) {

			this.nombre_usuario = usuario.getApellido() + "_" + usuario.getNombre();

		} else {
			this.nombre_usuario = "Desconocido";

		}

	}

	public String getRutaExcelCorteFecha() {
		ServletContext servletContext = (ServletContext) FacesContext.getCurrentInstance().getExternalContext()
				.getContext();

		String ruta = servletContext.getRealPath("") + File.separator + "reportes" + File.separator
				+ "plantilla_HTMC_Farmaco_FINAL.xlsx";
		return ruta;

	}

	public String getLogo() {

		ServletContext servletContext = (ServletContext) FacesContext.getCurrentInstance().getExternalContext()
				.getContext();
		String logo = servletContext.getRealPath("") + File.separator + "resources" + File.separator + "images"
				+ File.separator + "LOGO_HTMC.png";
		return logo;
	}

	public void exportarPDF(HashMap<String, Object> parametros, String path, String nombre_reporte) throws JRException,
			IOException {

		nombre_reporte = this.nombre_usuario + "_" + nombre_reporte + "_" + this.fecha_ruta;

		parametros.put("nombre_usuario", this.nombre_usuario);
		parametros.put("logo", this.getLogo());

		this.conn = ConnectionPostgres.Conectar();
		File jasper = new File(FacesContext.getCurrentInstance().getExternalContext().getRealPath(path));
		JasperPrint jasperPrint = JasperFillManager.fillReport(jasper.getPath(), parametros, conn);
		HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext()
				.getResponse();

		response.addHeader("Content-disposition", "attachment; filename=" + nombre_reporte + ".pdf");
		ServletOutputStream stream = response.getOutputStream();
		JasperExportManager.exportReportToPdfStream(jasperPrint, stream);
		stream.flush();
		stream.close();
		FacesContext.getCurrentInstance().responseComplete();

	}// Fin del metodo exportarPDFIngreso

	public void verPDF(HashMap<String, Object> parametros, String path, String nombre_reporte) throws JRException,
			IOException {

		parametros.put("nombre_usuario", this.nombre_usuario);
		parametros.put("logo", this.getLogo());

		this.conn = ConnectionPostgres.Conectar();

		File jasper = new File(FacesContext.getCurrentInstance().getExternalContext().getRealPath(path));
		byte[] bytes = JasperRunManager.runReportToPdf(jasper.getPath(), parametros, conn);
		HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext()
				.getResponse();
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);

		ServletOutputStream outStream = response.getOutputStream();
		outStream.write(bytes, 0, bytes.length);

		outStream.flush();
		outStream.close();
		FacesContext.getCurrentInstance().responseComplete();

	}// FIN DEL METODO verPDFIngreso

	public byte[] pdfImprimirStream(HashMap<String, Object> parametros, String path, String pathJrxlm,
			String nombre_reporte) throws JRException, IOException {

		reportPdf = null;
		this.conn = ConnectionPostgres.Conectar();
		
		parametros.put("nombre_usuario", this.nombre_usuario);
		parametros.put("logo", this.getLogo());

		File fichero = new File(FacesContext.getCurrentInstance().getExternalContext().getRealPath(path));
		String rutaJrxml = FacesContext.getCurrentInstance().getExternalContext().getRealPath(pathJrxlm);
		JasperReport jasperReport = (JasperReport) JRLoader.loadObject(fichero);

		if (jasperReport != null) {
			
			jasperReport = JasperCompileManager.compileReport(rutaJrxml);
			
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros,this.conn);
			
			reportPdf = JasperExportManager.exportReportToPdf(jasperPrint);
			
			
			return reportPdf;
		}
		else
		{
			System.out.println("Esta en null men");
			return null;
		}
		
		
	}

	public StreamedContent verPDFStream(HashMap<String, Object> parametros, String path, String nombre_reporte)
			throws JRException, IOException {

		parametros.put("nombre_usuario", this.nombre_usuario);
		parametros.put("logo", this.getLogo());

		File fichero = new File(FacesContext.getCurrentInstance().getExternalContext().getRealPath(path));

		String rutaJrxml = FacesContext.getCurrentInstance().getExternalContext().getRealPath(path);

		InputStream inputStream = null;

		this.conn = ConnectionPostgres.Conectar();

		ByteArrayOutputStream Teste = new ByteArrayOutputStream();

		// JasperReport jasperReport =
		// (JasperReport)JRLoader.loadObject(getClass().getClassLoader().getResourceAsStream(path.trim()));
		JasperReport jasperReport = (JasperReport) JRLoader.loadObject(fichero);

		JasperPrint print = JasperFillManager.fillReport(jasperReport, parametros, this.conn);

		JRExporter exporter = new net.sf.jasperreports.engine.export.JRPdfExporter();

		exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, Teste);

		exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

		exporter.exportReport();

		inputStream = new ByteArrayInputStream(Teste.toByteArray());

		return new DefaultStreamedContent(inputStream, "application/pdf", nombre_reporte);

	}

	public void exportarXLS(HashMap<String, Object> parametros, String path, String nombre_reporte) throws JRException,
			IOException {

		parametros.put("nombre_usuario", this.nombre_usuario);

		this.conn = ConnectionPostgres.Conectar();

		File jasper = new File(FacesContext.getCurrentInstance().getExternalContext().getRealPath(path));
		JasperPrint jasperPrint = JasperFillManager.fillReport(jasper.getPath(), parametros, conn);

		HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext()
				.getResponse();
		response.addHeader("Content-disposition", "attachment; filename=" + nombre_reporte + ".xls");
		ServletOutputStream stream = response.getOutputStream();
		JRXlsExporter exporter = new JRXlsExporter();

		exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, stream);
		exporter.exportReport();

		stream.flush();
		stream.close();
		FacesContext.getCurrentInstance().responseComplete();
	}// EXPORTAR A EXCEL

}
